//
// Generated file, do not edit! Created by opp_msgtool 6.2 from src/Mensagem.msg.
//

#ifndef __MENSAGEM_M_H
#define __MENSAGEM_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0602
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class Mensagem;
/**
 * Class generated from <tt>src/Mensagem.msg:2</tt> by opp_msgtool.
 * <pre>
 * packet Mensagem
 * {
 *     int idNoOrigem;
 *     int destinos[];
 *     double custos[];
 * }
 * </pre>
 */
class Mensagem : public ::omnetpp::cPacket
{
  protected:
    int idNoOrigem = 0;
    int *destinos = nullptr;
    size_t destinos_arraysize = 0;
    double *custos = nullptr;
    size_t custos_arraysize = 0;

  private:
    void copy(const Mensagem& other);

  protected:
    bool operator==(const Mensagem&) = delete;

  public:
    Mensagem(const char *name=nullptr, short kind=0);
    Mensagem(const Mensagem& other);
    virtual ~Mensagem();
    Mensagem& operator=(const Mensagem& other);
    virtual Mensagem *dup() const override {return new Mensagem(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getIdNoOrigem() const;
    virtual void setIdNoOrigem(int idNoOrigem);

    virtual void setDestinosArraySize(size_t size);
    virtual size_t getDestinosArraySize() const;
    virtual int getDestinos(size_t k) const;
    virtual void setDestinos(size_t k, int destinos);
    virtual void insertDestinos(size_t k, int destinos);
    [[deprecated]] void insertDestinos(int destinos) {appendDestinos(destinos);}
    virtual void appendDestinos(int destinos);
    virtual void eraseDestinos(size_t k);

    virtual void setCustosArraySize(size_t size);
    virtual size_t getCustosArraySize() const;
    virtual double getCustos(size_t k) const;
    virtual void setCustos(size_t k, double custos);
    virtual void insertCustos(size_t k, double custos);
    [[deprecated]] void insertCustos(double custos) {appendCustos(custos);}
    virtual void appendCustos(double custos);
    virtual void eraseCustos(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Mensagem& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Mensagem& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline Mensagem *fromAnyPtr(any_ptr ptr) { return check_and_cast<Mensagem*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __MENSAGEM_M_H

